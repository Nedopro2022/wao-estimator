// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVXW8rNRD9K5bhcZvdhJuXfStVH6qi3ohSAYqiyvFOur54bWOPU0K0/x2N9ytNIhCg",
	"+9DK64znHJ85Mz5yaRtnDRgMvDzyIGtoRFqu7Dv4O2tCbBwqa2jPeevAo4IUIV18bZTWij4qCNKrPpL/",
	"VAMTjY0Gmd2xu9VLYB5+j8pDxbYHBkLW7N3637QV1YxnHP4QjdOUdl1ky6LIFkVRbDKOBwe85MogvIHn",
	"bcZNbF6Hk/+EO8QFVos9MLRsC0xobaVAuMSdZ/PlVcx3gfiqjPQgAlwHhYCqoaxsiGPKMEcaMhlHEdnO",
	"+r+9/XqTrZf0l82LbL7MFvR/s8m4QmiS6pf0+h3hvTjwts34IDUv1ydFOtNuuqndfgGJ6WQAGb3CwzP5",
	"oKuycOoRDrcRa/pSdOEaRAWeEoqGEvxyc7t6uHm8/5VPZNIp3lJSZXY2+cUaFBJpGb2mPIgulHn+prCO",
	"25m0Tf4ElXXeLorFIn8X9qbX1fpchRAh0H21kmC6QvQEbp2QNdwsZgXP/kvurbbbvBHK5D883N0/Pd8n",
	"WcE34fPuGfxeSfiXKUkJhZqO/Xz7md2f7O/Bh844xWw+KwjKOjDCKV7y79JWxp3AOsmf0xWDExJCfhzX",
	"bT4ihfw4rtvcQ7DRU3DynjzrX+FFAwierHZu48e4BW8AIbARh2ddxYnOVO/TnyevoY+Q9ROEwHpX85JX",
	"sBNR4+SOgF6ZN3LcOYlRqMThOvypyP8PfpNxZ0NyJA02QSQeKl7ylQ34NAo/rkZ2YVz9OAi+Ote7IwcB",
	"v7fVYfA/GOyaymklE17+JXTFmah/62HHS/5NPg3nvJ/M+cVYbj92PMmQNoKzJnQtvCiKr4x/tYg07yiD",
	"BpqLIUoJIeyi1ocZmf5Tx+rj0QezF1pVrIM5GZy9lixEok7TO6WYX6Z4MSJibb36c4z6dBl1YjSLbGej",
	"6YKX11i9GLHV6QHpbAKzD9MyNdPpnFxvyFohNo3wB17yZzAVE8NzMIk3PhvD9eg1QPFG7Tkx5Ju2Q/P7",
	"oXO7GccJpQ8fZ+F0rN20fwUAAP//nGjGNeAHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
