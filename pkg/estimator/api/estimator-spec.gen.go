// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVXW/rNgz9K4K2Rzd2spuXvHVFH4o79Aboug8EQaHITK07fU2k0mWF//tA27HTLwzb",
	"sIc2tkCdc0ge0s9SBxeDB08oV88SdQNOdY/r8ATpKnjMLpIJns9iChESGegidMwPzlhr+KUG1MkMkfLH",
	"BoRyIXsSYS+u1vcoEvyeTYJa7I4ClG7EU0i/2aDqmSwk/KFctAy7qYplVRWLqqq2haRjBLmSxhM8QpJt",
	"IX12D6eb+HfEY6Bo1AEEBbEDoawNWhG8JZ4X8+W7pE+K6MF4nUAhfMAKSMYxrIhcOXEKFxHSR7lutsVm",
	"yX/FvCrmy2LB/7fbQhoC1/HsQ3KK5ErWIe8syFGdz27XixsOVErqKNu2kKdKy9XmrEevSzclGnZfQVN3",
	"FUHnZOh4xz7oM1XRfIbjZaaG3wyn24CqITGicgzwy8Xl+ubi8/Wvk7z+lmwZ1Ph96PwSPClN/JiTZRyi",
	"iKuyfDTU5N1MB1feQh1iCotqsSifVLgYqhpSaRAzICdsjQaPwDiDgMuodAMXi1kli3+DvbNhVzplfPnD",
	"zdX17d11V1dIDr/s7yAdjIZ/CMmVMGT52s+XX8T12fkBEva2qWbzWcVUIYJX0ciV/K47KmRU1HTlLzlF",
	"jEoDls8e23Kk4HfloC0PymbAsrOdfjWwKikHBInd9tq1tydkQY0iQQ1MOkUCDDlpEAZFDdGGYz8wnQFY",
	"3dR+j/LcdJQyFMMmYQ2D39nDsFfZ0uQSpGT8IzvvPW08we+L+kgI//xXKdtCxoCdS3nZKRZ0U8uVXAek",
	"sWR4i6Ms5NOfuiasX/egVwNI34f6eBoC8NRPVrRGdwTlV+wbNmn9NsFeruQ35bShy2E9l292c/ty7jnv",
	"7gBj8MPGWlTV/8z/soNDeUzwghEs8GrErDUg7rO1xxk7/1Ov6uXVG39Q1tSip8kjjRhqKTCzdDZkBzF/",
	"C3HvVaYmJPPnGPXpbdTkLB9I7EP2ffDyPVX3Xu1s9xHpfQGzFyuzG7DzZbnZspcwO6fSUa7kHfhaqOHr",
	"cOaR8ctxSo/dTeqRR3ZSKLdtz5YOp2nuF51kliF8XIjTtXbb/hUAAP//N2+iHeUHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
