// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xW227jNhD9FYLto2Ip7vrFb2kQFMEW2QBpekFgBGNqbHHLWzmkUzfwvxdDyVZiJyh6",
	"2T6ZpMk5Z25n9CyVt8E7dInk/FmS6tBCWV7F6CMvQvQBY9JYjpVvkX9bJBV1SNo7OZcXgs9FxBCR0CXt",
	"1iJ1KNI2oPCrskY2WAkCiwKo3wrHO+3Ed34iK8nX5VxSitqt5a6SFolg/Sbg8JdoMYE2e8BilU3h72CD",
	"Yc4PUrsNGN2KiL9lpCQXJ0i7SvKfOmLLD4qTI/p43y8/o0rM7NY/Ybz0jrIdOJ1EKuRHq43Rp+x/6FCA",
	"9dklDs7l7T2JPbxYbgWC6sSTj78aD+2RM001a5pq2jTNyEq7hGuMTMtl+7h/SX8FfLgoOtigSF4sUYAx",
	"XkHCY+DzavYm4hOk9KidigiE70AiJW3ZpggcNrG/LgLG9xx9mC2qh1l13lTns2raVNPZYlFJndAWkJWP",
	"FpKcy9bnpcGxeFy2y57ZcAAxwvY0xYfsHAftNNu7ShKqHHXa3nGD9G5C0B9xe5FTxzvNvnYILUa2CJYN",
	"/Hx2cXt99vHql5Fe/0ru2Kh2K9/3lEugEi9zNGwnpUDzul7r1OXlRHlb32DrQ/TTZjqtn8CfDSH1sdZE",
	"GYkdNlqho9ItA4GLAKrDs+mkkdU/sb00fllb0K7+/vry6ubuqsQVo6VPqzuMG63wb5rkSOhk+NlPF5/E",
	"1YvzDUbqa6aZnE8ahvIBHQQt5/KbclTJAKkr4a/ZRQqgkOpnR7v6AMF7sLirN2AyUl1qTh21KkSwmDBy",
	"qR2X7M3eskgdpKIrB54iIvkcFQpNosVg/LZvlVIAzG5MvyP5suhSzFgNEsschmLnGsYVZJPkG7r0Fre9",
	"op6Seo8I//xbKotKBk+lSlnmgAldt3Iubz2lQ8johg60iE9/LEm4Pc5BzwYpfevb7b4J0KW+s4LRqgDU",
	"n6lP2Mj164grOZdf1ePoqoe5VZ+o8u5137Pf5YCCd4NcTZvmC+O/zuAQHu2dYAsGWRcpK4VEq2zMdsKV",
	"/+E/ZNWP8jeoXA+DsaedD7T3k1JQZlAu8ELp/FTe7x3k1Pmo/zjc+vDliY+V73wSK59dDz77P6J272Bp",
	"yrjs+wAnr0ZEEZSXw+Fhwb1D2VqIWzmXd+haAcMofNEThzG5D3/5JIJ1+YYZhXKx69HiZq9evbBLRhmu",
	"HwbA+Gy32P0ZAAD///bmloTuCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
